{"ast":null,"code":"var _jsxFileName = \"/Volumes/DOZIER_SSD/Coding/JSPractice/chat-app/client/src/components/Chat/Chat.js\";\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client'; // import './Chat.css';\n\nconst Chat = ({\n  location\n}) => {\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const ENDPOINT = 'localhost:5000';\n  let socket;\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    socket = io(ENDPOINT);\n    setName(name);\n    setRoom(room); // Used for error handling\n    // socket.emit('join', { name, room }, ({ error }) => {\n    // });\n    //used for unmounting\n\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages([...messages, message]);\n    });\n  }, [messages]);\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  };\n\n  console.log(message, messages);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: message,\n    onChange: event => setMessage(event.target.value),\n    onKeyPress: event => event.key === 'Enter' ? sendMessage(event) : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Volumes/DOZIER_SSD/Coding/JSPractice/chat-app/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","Chat","location","name","setName","room","setRoom","message","setMessage","messages","setMessages","ENDPOINT","socket","parse","search","emit","off","on","sendMessage","event","preventDefault","console","log","target","value","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf,C,CACA;;AAIA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMc,QAAQ,GAAG,gBAAjB;AAEA,MAAIC,MAAJ;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAAEK,MAAAA,IAAF;AAAQE,MAAAA;AAAR,QAAiBN,WAAW,CAACc,KAAZ,CAAkBX,QAAQ,CAACY,MAA3B,CAAvB;AAEAF,IAAAA,MAAM,GAAGZ,EAAE,CAACW,QAAD,CAAX;AAEAP,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP,CANY,CAQZ;AACA;AAEA;AAEA;;AACA,WAAO,MAAM;AACTO,MAAAA,MAAM,CAACG,IAAP,CAAY,YAAZ;AAEAH,MAAAA,MAAM,CAACI,GAAP;AACH,KAJD;AAKH,GAnBQ,EAmBN,CAACL,QAAD,EAAWT,QAAQ,CAACY,MAApB,CAnBM,CAAT;AAqBAhB,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,MAAM,CAACK,EAAP,CAAU,SAAV,EAAsBV,OAAD,IAAa;AAC9BG,MAAAA,WAAW,CAAC,CAAE,GAAGD,QAAL,EAAeF,OAAf,CAAD,CAAX;AACH,KAFD;AAGH,GAJQ,EAIN,CAACE,QAAD,CAJM,CAAT;;AAMA,QAAMS,WAAW,GAAIC,KAAD,IAAW;AAC3BA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAGb,OAAH,EAAY;AACRK,MAAAA,MAAM,CAACG,IAAP,CAAY,aAAZ,EAA2BR,OAA3B,EAAoC,MAAMC,UAAU,CAAC,EAAD,CAApD;AACH;AACJ,GAND;;AAQAa,EAAAA,OAAO,CAACC,GAAR,CAAYf,OAAZ,EAAqBE,QAArB;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AACI,IAAA,KAAK,EAAEF,OADX;AAEI,IAAA,QAAQ,EAAGY,KAAD,IAAWX,UAAU,CAACW,KAAK,CAACI,MAAN,CAAaC,KAAd,CAFnC;AAGI,IAAA,UAAU,EAAEL,KAAK,IAAIA,KAAK,CAACM,GAAN,KAAc,OAAd,GAAwBP,WAAW,CAACC,KAAD,CAAnC,GAA6C,IAHtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CADJ;AAWH,CAzDD;;AA2DA,eAAelB,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\n// import './Chat.css';\n\n\n\nconst Chat = ({ location }) => {\n    const [name, setName] = useState('');\n    const [room, setRoom] = useState('');\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]);\n    const ENDPOINT = 'localhost:5000';\n\n    let socket;\n\n    useEffect(() => {\n        const { name, room } = queryString.parse(location.search);\n\n        socket = io(ENDPOINT);\n\n        setName(name);\n        setRoom(room);\n\n        // Used for error handling\n        // socket.emit('join', { name, room }, ({ error }) => {\n            \n        // });\n\n        //used for unmounting\n        return () => {\n            socket.emit('disconnect');\n\n            socket.off();\n        }\n    }, [ENDPOINT, location.search]);\n\n    useEffect(() => {\n        socket.on('message', (message) => {\n            setMessages([ ...messages, message ]);\n        })\n    }, [messages]);\n\n    const sendMessage = (event) => {\n        event.preventDefault();\n\n        if(message) {\n            socket.emit('sendMessage', message, () => setMessage(''));\n        }\n    }\n\n    console.log(message, messages);\n\n    return(\n        <div className=\"outerContainer\">\n            <div className=\"container\">\n                <input \n                    value={message} \n                    onChange={(event) => setMessage(event.target.value)}\n                    onKeyPress={event => event.key === 'Enter' ? sendMessage(event) : null}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}